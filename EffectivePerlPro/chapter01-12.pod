=encoding utf8 

=head1 理解上下文及其对操作的影响

=head2 数字和字符串上下文

在Perl中如何处理数据，如何求表示式的值，取决于上下文 -- 不同操作符下上下文不同。

	my $result = '123' + '345'; # 468
	my $result = 123 . 345;     # 123345

看下面的比较操作：

	print "12 is less than 2!\n" if '12' lt '2'; # lt为字符串比较符
	print "Oh noes! foo is bar!\n" if 'foo' == 'bar'; # ==为数值比较符，foo和bar转换为数值为0

=head2 标量和列表上下文

当操作需要的是单个对象时，Perl会使用标量上下文。期望多个对象时，使用列表上下文。
其实关键在于操作符，即在Perl语法中，操作符把上下文看成怎样的情景。如累计操作符两边需要的都是单个操作对象：

	1 + 2;
	'foo' . 'bar';

列表操作符期望操作的是多个元素，如print，它会取得一列元素并输出：

	print reverse( 1 .. 10 ) . "\n";

在Perl中，while的条件语句是标量上下文环境，而foreach的则是列表上下文：

	while( 标量上下文环境 ) { ... }
	foreach( 列表上下文环境 ) { ... }

问题产生了：假如我们要遍历某个文件句柄，对其中的每行内容进行处理，一旦发现"__END__"就立即停止。在while循环中，我们会依次读入一行内容进行处理，然后结束本次循环，继续读入文件句柄中的下一行：

	while( <STDIN> ) {
		last if /__END__/;
		...;
	}

	my $next_line = <STDIN>;

如何改为foreach：

	foreach( <STDIN> ) {
		last if /__END__/;
		...;
	}

	my $next_line = <STDIN>; # 完蛋了，没其他内容了！

为什么呢？因为foreach的列表环境，它一次性把所有内容都从STDIN中读出来了，STDIN里已经什么都没有了。
一般，while这样边读边处理的方式比较合适。

=head2 赋值操作决定的上下文

如果左值是一个列表，那么Perl认为右值是一个列表。

	my ($n) 	= ( 'a', 'b', 'c' ); 	# $n为'a'
	my ($n, $m) = ( 'a', 'b', 'c' ); 	# $n为'a', $m为'b'
	my @arr 	= ( 'a', 'b', 'c' ); 
	my @lines   = <STDIN>; 				# 读入所有行

上面的()和@告诉了Perl，=号的右边应该是列表。看下面这个：

	my $line = <STDIN>; 	# 只读取一行

即：如果上文告诉Perl当前处于列表上下文，那么Perl就把右值解释为列表。
Q: 如果右值不能解释为列表，则会怎么样？

=head2 空上下文结果

某些情况下，Perl会告诉我们 空上下文结果 操作毫无意义。比如打开warnings开关时，Perl会报：
Useless use of a variable in void context

如：

	some_sub(@args);
	grep { /foo/ } @array;
	1 + 2;
	# 上面的计算结果，压根就没有被使用

=head2 要点

=over 4

=item * Perl会根据你的操作自动判断当前的上下文环境。

=item * Perl会根据数字或字符串上下文来对标量作相应解释。

=item * 在列表上下文或标量上下文中的计算结果可能完全不同。

=back



