=encoding utf8

=head1 常见简写和双关语

Perl极富表达力，不过有时多变的语法并不能完美兼顾。所以某些情况下，你得亲自给它一点暗示，才能帮助它做出正确选择。

=head2 使用列表赋值来进行变量对调

	($b, $a) = ($a, $b);
	($c, $a, $b) = ($a, $b, $c);

数组切片能让你用简单的语法随意置换数组内容：

	@a[ 1, 3, 5 ] = @a[ 5, 3, 1]; # 兑换个别数组元素

也可以进一步使用数组切片来完成数组奇偶元素的对调：

	@a[ map { $_*2+1, $_*2 } 0 .. ($#a / 2) ] = @a;

=head2 用[] 或()[] 转为列表上下文

有时需要强制Perl在列表上下文计算某个表达式。比如用正则切分字符串，开始你可能这么写：

	# 按+号切分$_中:之前的部分
	my ($str) = /([^:]*)/;
	my @words = split /\+/, $str;

为了避免使用临时变量$str，可以把上面两条语句合并。不过需要技巧哦~，因为第一模式匹配在标量上下文的地方不会返回匹配到的字符串。我们可以利用切片，将它转为列表上下文，然后取第一个位置上的值：

	my @words = split /\+/, (/([^:]*)/)[0];

如果想要一步完成列表计算结果到引用的转换，可以使用匿名数组构造器[]。引用操作符\加在列表上，只会返回一个新的列表：

	my $list_ref = \( split /\++/, $str ); # error
	my $list_ref = [ split /\++/, $str ];  # ok


